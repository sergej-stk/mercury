name: Java Maven CI/CD Release Pipeline

on:
  push:
    tags:
      - 'v*'

permissions: write-all

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: 'maven'

      - name: Build with Maven (Compile)
        run: mvn clean compile

      - name: Run tests with Maven
        run: mvn test

      - name: Package with Maven
        run: mvn package -DskipTests

      - name: Find JAR file
        id: find_jar
        run: |
          jar_filepath=$(find target -maxdepth 1 -type f -name "*.jar" ! -name "*original.jar" ! -name "*sources.jar" ! -name "*javadoc.jar" | head -n 1)
          if [[ -z "$jar_filepath" ]]; then
            echo "Error: No JAR file found in target directory."
            exit 1
          fi
          echo "Found JAR file: $jar_filepath"
          echo "jar_path=$jar_filepath" >> $GITHUB_OUTPUT

      - name: Upload JAR file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: ${{ steps.find_jar.outputs.jar_path }}

      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (JAR)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_jar.outputs.jar_path }}
          asset_name: application.jar
          asset_content_type: application/java-archive

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/mercury

      - name: Build and push Docker image (version tag)
        id: push_version_image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/mercury:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker image (latest tag)
        id: push_latest_image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/mercury:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation (version tag)
        if: ${{ steps.push_version_image.outputs.digest }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/mercury
          subject-digest: ${{ steps.push_version_image.outputs.digest }}
          push-to-registry: true

      - name: Generate artifact attestation (latest tag)
        if: ${{ steps.push_latest_image.outputs.digest }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/mercury
          subject-digest: ${{ steps.push_latest_image.outputs.digest }}
          push-to-registry: true

{"openapi":"3.0.1","info":{"title":"Mercury API","description":"### Overview\nMercury is a flexible backend platform currently under development.\nIt is designed to provide a foundation for various functionalities such as user management,\ndata exchange, and secure service interaction.\n\n### Authentication\nMost endpoints are secured using Bearer Token authentication (JWT).\nA token can typically be obtained via an authentication endpoint (e.g., `/auth/login`).\n\n### Key Concepts\n* **User:** A general representation of an authenticated entity.\n* **Entity:** Placeholder for domain-specific resources.\n* **Operation:** Placeholder for interactions with data or processes.\n","termsOfService":"https://example.com/terms","contact":{"name":"Mercury Dev Team","url":"https://github.com/sergej-stk/mercury","email":"mercury-dev@example.com"},"license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"1.0.0","x-logo":{"backgroundColor":"#FFFFFF","altText":"Mercury API Logo","href":"https://mercury.sergejsteinsiek.com/","url":"https://raw.githubusercontent.com/sergej-stk/mercury/refs/heads/main/assets/logo.png"}},"externalDocs":{"description":"GitHub Repository","url":"https://github.com/sergej-stk/mercury"},"servers":[{"url":"http://localhost:8080","description":"Development Server"},{"url":"https://api.mercury.example.com","description":"Production Server"}],"tags":[{"name":"Authentication","description":"Authentication and token management.","externalDocs":{"description":"Find out more","url":"https://github.com/sergej-stk/mercury"}},{"name":"Users","description":"Operations related to user accounts.","externalDocs":{"description":"Find out more","url":"https://github.com/sergej-stk/mercury"}},{"name":"Core","description":"General-purpose endpoints and features.","externalDocs":{"description":"Find out more","url":"https://github.com/sergej-stk/mercury"}}],"paths":{"/v1/auth/register":{"post":{"tags":["Authentication"],"summary":"Register a new user","description":"Creates a new user account based on the provided details in the request body.","operationId":"registerUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUser"}}},"required":true},"responses":{"400":{"description":"Invalid input data provided (e.g., validation errors)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorDetails"}}}},"409":{"description":"User already registered (email or username already exists)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorDetails"}}}},"201":{"description":"User successfully registered","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}}}}}},"components":{"schemas":{"CreateUser":{"title":"User Create","required":["email","password","username"],"type":"object","properties":{"username":{"title":"Username","maxLength":50,"minLength":3,"type":"string","description":"The desired unique username for the new user. Must be between 3 and 50 characters.","example":"new.user"},"email":{"title":"Email Address","maxLength":254,"minLength":5,"type":"string","description":"The desired unique email address for the new user. Must be a valid email format and max 100 characters.","format":"email","example":"new.user@example.com"},"password":{"title":"Password","maxLength":25,"minLength":8,"type":"string","description":"The desired password for the new user. Must meet complexity requirements (e.g., min 8 characters, max 25 characters, contain uppercase, lowercase, digit, special character).","format":"password","writeOnly":true,"example":"S3cureP@ssw0rd!"}},"description":"Data required to create a new user account."},"ErrorDetails":{"title":"Error Details","type":"object","properties":{"timestamp":{"title":"Timestamp","type":"string","description":"The date and time (with time zone offset) when the error response was generated.","format":"date-time","example":"2025-05-06T00:35:09.123+02:00"},"status":{"title":"HTTP Status Code","type":"integer","description":"The HTTP status code indicating the outcome of the API request.","format":"int32","example":404},"errorCode":{"title":"Internal Error Code","type":"string","description":"A unique, application-specific, machine-readable code identifying the type of error. Useful for programmatic error handling by clients.","example":"E-USER-0002"},"message":{"title":"Error Message","type":"string","description":"A human-readable description of the error that occurred.","example":"Item with ID '123' could not be found."},"path":{"title":"API Path","type":"string","description":"The API endpoint (path) that produced this error response.","example":"/api/v1/items/123"},"debugId":{"title":"Debug ID","type":"string","description":"A unique identifier (UUID) assigned to this specific error instance, useful for debugging and tracing purposes (e.g., correlating with logs).","format":"uuid","example":"f81d4fae-7dec-11d0-a765-00a0c91e6bf6"}},"description":"Represents a standardized error response containing essential details like timestamp, HTTP status code, a unique error code, an error message, and the API endpoint that generated the response."},"User":{"title":"User","required":["displayId","email","id","username"],"type":"object","properties":{"id":{"title":"ID","type":"string","description":"A stable, unique identifier (UUID) used for referencing the user in public APIs or between systems. Not intended for direct display to end-users.","format":"uuid","readOnly":true,"example":"a1b2c3d4-e5f6-7890-1234-567890abcdef"},"displayId":{"title":"User Display ID","type":"string","description":"A user-friendly, human-readable, unique identifier intended for display to end-users or for easy reference. Format: String, 6-25 characters.","readOnly":true,"example":"USR-GHT7Y2"},"username":{"title":"Username","type":"string","description":"The user's unique username, used for login and identification within the application. Length: 3-50 characters.","readOnly":true,"example":"john.doe"},"email":{"title":"Email Address","type":"string","description":"The user's unique email address, used for communication and potentially login or password recovery. Max length: 100 characters.","format":"email","readOnly":true,"example":"john.doe@example.com"}},"description":"Represents a user with identifiers, core profile information (username, email), and system metadata. Suitable for API responses displaying user details."}},"securitySchemes":{"bearerAuth":{"type":"http","description":"Bearer Authentication with JWT. Include the token in the 'Authorization' header as 'Bearer {token}'.","name":"Authorization","in":"header","scheme":"bearer","bearerFormat":"JWT"}}}}
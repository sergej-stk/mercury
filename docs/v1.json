{"openapi":"3.1.0","info":{"title":"Mercury API","description":"### Overview\nMercury API provides the backend services for the Mercury platform.\nCurrently, its primary focus is to support functionalities for **employee management** and the handling of related **HR processes and workflows**.\nThis includes managing employee data, controlling onboarding/offboarding, administering absences, and facilitating other HR operations.\n\n### Authentication\nMost endpoints are secured using Bearer Token authentication (JWT).\nA token can typically be obtained via an authentication endpoint (e.g., `/auth/login`).\n\n### Key Concepts (Current Focus)\n* **Employee:** Represents an employee within the system (supersedes generic 'User' for core functions).\n* **Workflow:** A defined HR process (e.g., leave request, performance review).\n* **Action/Task:** A specific step within a workflow requiring interaction or completion.\n","termsOfService":"https://example.com/terms","contact":{"name":"Mercury Dev Team","url":"https://github.com/sergej-stk/mercury","email":"mercury-dev@example.com"},"license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"1.0.0","summary":"API for the Mercury platform, focusing on employee management, HR processes, and workflows.","x-logo":{"backgroundColor":"#FFFFFF","altText":"Mercury API Logo","href":"https://mercury.sergejsteinsiek.com/","url":"https://raw.githubusercontent.com/sergej-stk/mercury/refs/heads/main/assets/logo.png"}},"externalDocs":{"description":"GitHub Repository","url":"https://github.com/sergej-stk/mercury"},"servers":[{"url":"http://localhost:8080","description":"Development Server"},{"url":"https://api.mercury.example.com","description":"Production Server"}],"tags":[{"name":"Authentication","description":"Authentication and token management.","externalDocs":{"description":"Find out more","url":"https://github.com/sergej-stk/mercury"}},{"name":"Users","description":"Operations related to user accounts.","externalDocs":{"description":"Find out more","url":"https://github.com/sergej-stk/mercury"}},{"name":"Core","description":"General-purpose endpoints and features.","externalDocs":{"description":"Find out more","url":"https://github.com/sergej-stk/mercury"}}],"paths":{"/v1/auth/register":{"post":{"tags":["Authentication"],"summary":"Register a new user","description":"Creates a new user account based on the provided details in the request body.","operationId":"registerUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUser"}}},"required":true},"responses":{"201":{"description":"User successfully registered","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"Invalid input data provided (e.g., validation errors)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorDetails"}}}},"409":{"description":"User already registered (email or username already exists)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorDetails"}}}}}}}},"components":{"schemas":{"CreateUser":{"type":"object","description":"Data required to create a new user account.","properties":{"username":{"type":"string","description":"The desired unique username for the new user. Must be between 3 and 50 characters.","example":"new.user","maxLength":50,"minLength":3,"title":"Username"},"email":{"type":"string","format":"email","description":"The desired unique email address for the new user. Must be a valid email format and max 100 characters.","example":"new.user@example.com","maxLength":254,"minLength":5,"title":"Email Address"},"password":{"type":"string","format":"password","description":"The desired password for the new user. Must meet complexity requirements (e.g., min 8 characters, max 25 characters, contain uppercase, lowercase, digit, special character).","example":"S3cureP@ssw0rd!","maxLength":25,"minLength":8,"title":"Password","writeOnly":true}},"required":["email","password","username"],"title":"User Create"},"User":{"type":"object","description":"Represents a user with identifiers, core profile information (username, email), and system metadata. Suitable for API responses displaying user details.","properties":{"id":{"type":"string","format":"uuid","description":"A stable, unique identifier (UUID) used for referencing the user in public APIs or between systems. Not intended for direct display to end-users.","example":"a1b2c3d4-e5f6-7890-1234-567890abcdef","readOnly":true,"title":"ID"},"displayId":{"type":"string","description":"A user-friendly, human-readable, unique identifier intended for display to end-users or for easy reference. Format: String, 6-25 characters.","example":"USR-GHT7Y2","readOnly":true,"title":"User Display ID"},"username":{"type":"string","description":"The user's unique username, used for login and identification within the application. Length: 3-50 characters.","example":"john.doe","readOnly":true,"title":"Username"},"email":{"type":"string","format":"email","description":"The user's unique email address, used for communication and potentially login or password recovery. Max length: 100 characters.","example":"john.doe@example.com","readOnly":true,"title":"Email Address"}},"required":["displayId","email","id","username"],"title":"User"},"ErrorDetails":{"type":"object","description":"Represents a standardized error response containing essential details like timestamp, HTTP status code, a unique error code, an error message, and the API endpoint that generated the response.","properties":{"timestamp":{"type":"string","format":"date-time","description":"The date and time (with time zone offset) when the error response was generated.","example":"2025-05-06T00:35:09.123+02:00","title":"Timestamp"},"status":{"type":"integer","format":"int32","description":"The HTTP status code indicating the outcome of the API request.","example":404,"title":"HTTP Status Code"},"errorCode":{"type":"string","description":"A unique, application-specific, machine-readable code identifying the type of error. Useful for programmatic error handling by clients.","example":"E-USER-0002","title":"Internal Error Code"},"message":{"type":"string","description":"A human-readable description of the error that occurred.","example":"Item with ID '123' could not be found.","title":"Error Message"},"path":{"type":"string","description":"The API endpoint (path) that produced this error response.","example":"/api/v1/items/123","title":"API Path"},"debugId":{"type":"string","format":"uuid","description":"A unique identifier (UUID) assigned to this specific error instance, useful for debugging and tracing purposes (e.g., correlating with logs).","example":"f81d4fae-7dec-11d0-a765-00a0c91e6bf6","title":"Debug ID"}},"title":"Error Details"}},"securitySchemes":{"bearerAuth":{"type":"http","description":"Bearer Authentication with JWT. Include the token in the 'Authorization' header as 'Bearer {token}'.","name":"Authorization","in":"header","scheme":"bearer","bearerFormat":"JWT"}}}}